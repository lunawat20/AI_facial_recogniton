<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Facial Recognition</title>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/face_mesh.js"></script>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            background: linear-gradient(to bottom right, #0f2027, #203a43, #2c5364);
            color: #fff;
        }

        /* Background Animation */
        .background-animation {
            position: fixed;
            top: 0;
            left: 0;
            width: 300%;
            height: 100%;
            background: url('img1.jpg') repeat-x;
            background-size: cover;
            z-index: -1;
            animation: moveBackground 15s linear infinite;
        }

        @keyframes moveBackground {
            from {
                transform: translateX(0);
            }
            to {
                transform: translateX(-33.33%);
            }
        }

        header {
            text-align: center;
            background: rgba(0, 0, 0, 0.7);
            padding: 10px;
            font-size: 28px;
            font-weight: bold;
            position: relative;
            z-index: 10;
        }

        header h1 {
            margin: 0;
            font-size: 32px;
            background: linear-gradient(to right, #ff0077, #ffae00);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        main {
            display: flex;
            flex: 1;
        }

        /* Left Section */
        .left-section {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .frame {
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 20px;
            width: 100%;
            max-width: 420px;
            border: 8px solid #fff;
            border-radius: 15px;
            background: rgba(0, 0, 0, 0.7);
        }

        #video, #output {
            width: 100%;
            height: auto;
            border-radius: 10px;
        }

        canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 10px;
        }

        .controls {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 10px;
        }

        .slider-container {
            display: flex;
            align-items: center;
            color: #ffae00;
            gap: 10px;
        }

        .slider-container label {
            font-size: 16px;
        }

        .slider-container input {
            width: 150px;
        }

        .capture-btn {
            background: linear-gradient(to right, #ff0077, #ffae00);
            color: white;
            border: none;
            border-radius: 50%;
            width: 70px;
            height: 70px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 24px;
        }

        /* Right Section */
        .right-section {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(0, 0, 0, 0.7);
            border-left: 2px solid #fff;
        }

        .search-container {
            text-align: center;
        }

        .search-container h2 {
            margin-bottom: 20px;
            font-size: 24px;
            color: #ffae00;
        }

        .search-animation {
            font-size: 18px;
            font-style: italic;
            color: #fff;
            animation: searching 2s linear infinite;
        }

        @keyframes searching {
            0% { opacity: 0.3; }
            50% { opacity: 0.7; }
            100% { opacity: 0.3; }
        }
    </style>
</head>
<body>
    <!-- Background Animation -->
    <div class="background-animation"></div>

    <header>
        <h1>AI Facial Recognition</h1>
    </header>

    <main>
        <!-- Left Section for Camera Capture -->
        <section class="left-section">
            <div class="frame">
                <video id="video" autoplay muted></video>
                <canvas id="output"></canvas>
            </div>
            <div class="controls">
                <div class="slider-container">
                    <label for="brightness">Brightness:</label>
                    <input type="range" id="brightness" min="50" max="150" value="100">
                </div>
                <div class="slider-container">
                    <label for="contrast">Contrast:</label>
                    <input type="range" id="contrast" min="50" max="150" value="100">
                </div>
                <div class="slider-container">
                    <label for="hue">Hue:</label>
                    <input type="range" id="hue" min="0" max="360" value="0">
                </div>
                <div class="slider-container">
                    <label for="saturation">Saturation:</label>
                    <input type="range" id="saturation" min="50" max="200" value="100">
                </div>
                <div class="slider-container">
                    <label for="grayscale">Grayscale:</label>
                    <input type="range" id="grayscale" min="0" max="100" value="0">
                </div>
                <button class="capture-btn" onclick="capturePhoto()">ðŸ“¸</button>
            </div>
        </section>

        <!-- Right Section for Search Display -->
        <section class="right-section">
            <div class="search-container">
                <h2 id="status-text">Image is Being Captured...</h2>
                <div id="search-animation" class="search-animation">Searching in Database...</div>
            </div>
        </section>
    </main>

    <script>
        const video = document.getElementById('video');
        const canvas = document.getElementById('output');
        const ctx = canvas.getContext('2d');
        const statusText = document.getElementById('status-text');
        const searchAnimation = document.getElementById('search-animation');

        navigator.mediaDevices.getUserMedia({ video: true }).then((stream) => {
            video.srcObject = stream;
        });

        function applyFilters() {
            const brightness = document.getElementById('brightness').value;
            const contrast = document.getElementById('contrast').value;
            const hue = document.getElementById('hue').value;
            const saturation = document.getElementById('saturation').value;
            const grayscale = document.getElementById('grayscale').value;

            video.style.filter = `
                brightness(${brightness}%) 
                contrast(${contrast}%) 
                hue-rotate(${hue}deg) 
                saturate(${saturation}%) 
                grayscale(${grayscale}%)
            `;
        }

        function capturePhoto() {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            ctx.filter = video.style.filter; // Apply current filters
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

            statusText.textContent = "Searching in Database...";
            searchAnimation.style.display = "block";
        }

        // Attach sliders to real-time filters
        document.querySelectorAll('input[type="range"]').forEach(slider => {
            slider.addEventListener('input', applyFilters);
        });
    // Load MediaPipe FaceMesh
    const faceMesh = new FaceMesh({
        locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`,
    });

    faceMesh.setOptions({
        maxNumFaces: 1,
        refineLandmarks: true,
        minDetectionConfidence: 0.5,
        minTrackingConfidence: 0.5,
    });

    faceMesh.onResults(onResults);

    // Access user webcam
    navigator.mediaDevices.getUserMedia({ video: true }).then((stream) => {
        video.srcObject = stream;
        video.play();
        video.addEventListener('loadeddata', () => {
            startFaceMesh();
        });
    });

    // Start processing video for FaceMesh
    async function startFaceMesh() {
        const sendToFaceMesh = async () => {
            await faceMesh.send({ image: video });
            requestAnimationFrame(sendToFaceMesh);
        };
        sendToFaceMesh();
    }

    // Callback to render face mesh points
    function onResults(results) {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;

        ctx.save();
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(results.image, 0, 0, canvas.width, canvas.height);

        if (results.multiFaceLandmarks) {
            for (const landmarks of results.multiFaceLandmarks) {
                drawConnectors(ctx, landmarks, FACEMESH_TESSELATION, { color: '#00FF00', lineWidth: 0.5 });
                drawConnectors(ctx, landmarks, FACEMESH_RIGHT_EYE, { color: '#30FF30' });
                drawConnectors(ctx, landmarks, FACEMESH_LEFT_EYE, { color: '#30FF30' });
                drawConnectors(ctx, landmarks, FACEMESH_FACE_OVAL, { color: '#E0E0E0', lineWidth: 1 });
            }
        }
        ctx.restore();
    }
</script>
<script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/face_mesh.js"></script>

    </script>
</body>
</html>
